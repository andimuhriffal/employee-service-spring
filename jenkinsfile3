pipeline {
    agent { label 'agent-node1' }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        // Menyediakan token login dari credential Jenkins jika perlu
        SONAR_LOGIN = credentials('sonarqube-token') // Opsional jika tidak pakai token
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv(installationName: 'sq1') {
                    sh 'chmod +x ./mvnw'
                    sh '''
                        ./mvnw clean verify \
                        org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar \
                        -DskipTests \
                        -Dsonar.projectKey=employee-service-spring \
                        -Dsonar.projectName="Employee Service" \
                        -Dsonar.login=$SONAR_LOGIN
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
